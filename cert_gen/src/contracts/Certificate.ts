/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CertificateInterface extends utils.Interface {
  functions: {
    "issueCertificate(string,string,string)": FunctionFragment;
    "getCertificate(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "issueCertificate" | "getCertificate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;

  events: {
    "CertificateIssued(string,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CertificateIssued"): EventFragment;
}

export interface CertificateIssuedEventObject {
  certificateID: string;
  name: string;
  course: string;
  dateIssued: BigNumber;
}
export type CertificateIssuedEvent = TypedEvent<
  [string, string, string, BigNumber],
  CertificateIssuedEventObject
>;

export type CertificateIssuedEventFilter =
  TypedEventFilter<CertificateIssuedEvent>;

export interface Certificate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    issueCertificate(
      _name: string,
      _course: string,
      _certificateID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCertificate(
      _certificateID: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;
  };

  issueCertificate(
    _name: string,
    _course: string,
    _certificateID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCertificate(
    _certificateID: string,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  callStatic: {
    issueCertificate(
      _name: string,
      _course: string,
      _certificateID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCertificate(
      _certificateID: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;
  };

  filters: {
    "CertificateIssued(string,string,string,uint256)"(
      certificateID?: null,
      name?: null,
      course?: null,
      dateIssued?: null
    ): CertificateIssuedEventFilter;
    CertificateIssued(
      certificateID?: null,
      name?: null,
      course?: null,
      dateIssued?: null
    ): CertificateIssuedEventFilter;
  };

  estimateGas: {
    issueCertificate(
      _name: string,
      _course: string,
      _certificateID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCertificate(
      _certificateID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    issueCertificate(
      _name: string,
      _course: string,
      _certificateID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCertificate(
      _certificateID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
