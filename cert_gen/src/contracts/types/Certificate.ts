/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Certificate {
  export type CertStruct = {
    name: string;
    course: string;
    dateIssued: BigNumberish;
    certificateID: string;
  };

  export type CertStructOutput = [
    name: string,
    course: string,
    dateIssued: bigint,
    certificateID: string
  ] & {
    name: string;
    course: string;
    dateIssued: bigint;
    certificateID: string;
  };
}

export interface CertificateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "issueCertificate"
      | "getCertificate"
      | "getCertificatesByName"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CertificateIssued"): EventFragment;

  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificatesByName",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificatesByName",
    data: BytesLike
  ): Result;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    certificateID: string,
    name: string,
    course: string,
    dateIssued: BigNumberish
  ];
  export type OutputTuple = [
    certificateID: string,
    name: string,
    course: string,
    dateIssued: bigint
  ];
  export interface OutputObject {
    certificateID: string;
    name: string;
    course: string;
    dateIssued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Certificate extends BaseContract {
  connect(runner?: ContractRunner | null): Certificate;
  waitForDeployment(): Promise<this>;

  interface: CertificateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  issueCertificate: TypedContractMethod<
    [_name: string, _course: string, _certificateID: string],
    [void],
    "nonpayable"
  >;

  getCertificate: TypedContractMethod<
    [_certificateID: string],
    [
      [string, string, bigint, string] & {
        name: string;
        course: string;
        dateIssued: bigint;
        certificateID: string;
      }
    ],
    "view"
  >;

  getCertificatesByName: TypedContractMethod<
    [_name: string],
    [Certificate.CertStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "issueCertificate"
  ): TypedContractMethod<
    [_name: string, _course: string, _certificateID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCertificate"
  ): TypedContractMethod<
    [_certificateID: string],
    [
      [string, string, bigint, string] & {
        name: string;
        course: string;
        dateIssued: bigint;
        certificateID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificatesByName"
  ): TypedContractMethod<
    [_name: string],
    [Certificate.CertStructOutput[]],
    "view"
  >;

  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;

  filters: {
    "CertificateIssued(string,string,string,uint256)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
  };
}
