/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Certificate, CertificateInterface } from "../Certificate";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "certificateID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "course",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "dateIssued",
        type: "uint256",
      },
    ],
    name: "CertificateIssued",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_course",
        type: "string",
      },
      {
        internalType: "string",
        name: "_certificateID",
        type: "string",
      },
    ],
    name: "issueCertificate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_certificateID",
        type: "string",
      },
    ],
    name: "getCertificate",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063beec1caa1461003b578063ed0f2e7514610057575b600080fd5b61005560048036038101906100509190610580565b610089565b005b610071600480360381019061006c919061053f565b6101dd565b60405161008093929190610781565b60405180910390f35b6000808260405161009a9190610710565b908152602001604051809103902060030180546100b6906108da565b9050146100f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ef906107e6565b60405180910390fd5b6040518060800160405280848152602001838152602001428152602001828152506000826040516101299190610710565b90815260200160405180910390206000820151816000019080519060200190610153929190610434565b506020820151816001019080519060200190610170929190610434565b50604082015181600201556060820151816003019080519060200190610197929190610434565b509050507f96271eaf370790942baffd60b2c0f9dcadd6d8141dbca33de0c8fb12f0efd484818484426040516101d09493929190610727565b60405180910390a1505050565b6060806000806000856040516101f39190610710565b908152602001604051809103902060405180608001604052908160008201805461021c906108da565b80601f0160208091040260200160405190810160405280929190818152602001828054610248906108da565b80156102955780601f1061026a57610100808354040283529160200191610295565b820191906000526020600020905b81548152906001019060200180831161027857829003601f168201915b505050505081526020016001820180546102ae906108da565b80601f01602080910402602001604051908101604052809291908181526020018280546102da906108da565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b505050505081526020016002820154815260200160038201805461034a906108da565b80601f0160208091040260200160405190810160405280929190818152602001828054610376906108da565b80156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505081525050905060008160600151511415610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e906107c6565b60405180910390fd5b806000015181602001518260400151935093509350509193909250565b828054610440906108da565b90600052602060002090601f01602090048101928261046257600085556104a9565b82601f1061047b57805160ff19168380011785556104a9565b828001600101855582156104a9579182015b828111156104a857825182559160200191906001019061048d565b5b5090506104b691906104ba565b5090565b5b808211156104d35760008160009055506001016104bb565b5090565b60006104ea6104e584610837565b610806565b90508281526020810184848401111561050257600080fd5b61050d848285610898565b509392505050565b600082601f83011261052657600080fd5b81356105368482602086016104d7565b91505092915050565b60006020828403121561055157600080fd5b600082013567ffffffffffffffff81111561056b57600080fd5b61057784828501610515565b91505092915050565b60008060006060848603121561059557600080fd5b600084013567ffffffffffffffff8111156105af57600080fd5b6105bb86828701610515565b935050602084013567ffffffffffffffff8111156105d857600080fd5b6105e486828701610515565b925050604084013567ffffffffffffffff81111561060157600080fd5b61060d86828701610515565b9150509250925092565b600061062282610867565b61062c8185610872565b935061063c8185602086016108a7565b6106458161096a565b840191505092915050565b600061065b82610867565b6106658185610883565b93506106758185602086016108a7565b80840191505092915050565b600061068e601a83610872565b91507f436572746966696361746520646f6573206e6f742065786973740000000000006000830152602082019050919050565b60006106ce601d83610872565b91507f436572746966696361746520494420616c7265616479206578697374730000006000830152602082019050919050565b61070a8161088e565b82525050565b600061071c8284610650565b915081905092915050565b600060808201905081810360008301526107418187610617565b905081810360208301526107558186610617565b905081810360408301526107698185610617565b90506107786060830184610701565b95945050505050565b6000606082019050818103600083015261079b8186610617565b905081810360208301526107af8185610617565b90506107be6040830184610701565b949350505050565b600060208201905081810360008301526107df81610681565b9050919050565b600060208201905081810360008301526107ff816106c1565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561082d5761082c61093b565b5b8060405250919050565b600067ffffffffffffffff8211156108525761085161093b565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156108c55780820151818401526020810190506108aa565b838111156108d4576000848401525b50505050565b600060028204905060018216806108f257607f821691505b602082108114156109065761090561090c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea26469706673582212205c5834569bbedbf38f8426db4990a65033ffd7c333028a90bfe7b1053a01ebae64736f6c63430008000033";

type CertificateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Certificate__factory extends ContractFactory {
  constructor(...args: CertificateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Certificate> {
    return super.deploy(overrides || {}) as Promise<Certificate>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Certificate {
    return super.attach(address) as Certificate;
  }
  override connect(signer: Signer): Certificate__factory {
    return super.connect(signer) as Certificate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateInterface {
    return new utils.Interface(_abi) as CertificateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Certificate {
    return new Contract(address, _abi, signerOrProvider) as Certificate;
  }
}
